{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","mode","setMode","players","setPlayers","roles","setRoles","auth","setAuth","message","setMessage","gameState","setGameState","myState","setMyState","window","location","pathname","replace","split","name","key","useEffect","interval","setInterval","fetch","then","res","json","success","data","clearInterval","mode_tag","custom_content","vote","render_vote","players_html","map","player","onClick","kick","roles_html","Object","keys","role","toggle","captain","i","player_approve_box","toggleProposal","className","proposal","includes","proposed","player_info_box","skips","length","votes","vote_details_box","did_vote_box","captain_view","approve_view","act_view","round","successes","fails","render_round","assassin_mode","approved","act","Container","Boolean","hostname","match","ReactDOM","render","StrictMode","rel","href","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.83baf601.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport { Container } from 'react-bootstrap'\n\nfunction App() {\n  const [mode, setMode] = useState('lobby')\n  const [players, setPlayers] = useState([])\n  const [roles, setRoles] = useState({})\n  const [auth, setAuth] = useState(false)\n  const [message, setMessage] = useState(\"\")\n  const [gameState, setGameState] = useState({'round': 0, 'successes': [], 'fails': [], 'mission': 0, 'captain': 0, 'skips': 0, 'proposed': false, 'approved': false, 'proposal': [], 'votes': [], 'hypertext': 'ReactJS is legendary', 'assassin_mode': false})\n  const [myState, setMyState] = useState({'i': 0, 'roles': [], 'vote': '', 'act': '', 'assassin': false});\n  let [name, key] = window.location.pathname.replace('/', '').split('-')\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetch('/server/auth/' + name + '/' + key).then(res => res.json()).then(res => setAuth(res.success))\n      fetch('/server/get_mode').then(res => res.json()).then(res => {if (res.success) setMode(res.data)})\n      fetch('/server/lobby/get_players').then(res => res.json()).then(res => {if (res.success) setPlayers(res.data)})\n      fetch('/server/lobby/get_roles').then(res => res.json()).then(res => {if (res.success) setRoles(res.data)})\n      fetch('/server/game/get_game_state/' + name + '/' + key).then(res => res.json()).then(res => {if (res.success) setGameState(res)})\n      fetch('/server/game/get_my_state/' + name + '/' + key).then(res => res.json()).then(res => {if (res.success) setMyState(res)})\n    }, 1000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [players, mode, roles, name, key])\n\n  const mode_tag = <p>[{mode}]</p>\n\n  let custom_content = null\n\n  const kick = (player) => {\n    fetch('/server/lobby/kick/' + player)\n  }\n\n  const toggle = (role) => {\n    fetch('/server/lobby/toggle/' + role)\n  }\n  \n  const startGame = () => {\n    fetch('/server/lobby/start_game').then(res => res.json()).then(res => setMessage(res.message))\n  }\n\n  const toggleProposal = (player) => {\n    fetch('/server/game/toggle_proposal/' + name + '/' + key + '/' + player)\n  }\n\n  const proposeTeam = () => {\n    fetch('/server/game/propose_team/' + name + '/' + key).then(res => res.json()).then(res => setMessage(res.message))\n  }\n\n  const vote = (vote) => {\n    fetch('/server/game/vote/' + name + '/' + key + '/' + vote)\n  }\n\n  const render_vote = (vote) => vote === 'approve' ? 'âœ…' : vote === 'disapprove' ? 'ðŸ›‘' : '...'\n\n  const hammer = () => (gameState.captain + 5 - gameState.skips) % players.length;\n\n  let players_html = null;\n  // eslint-disable-next-line\n  let roles_html = null;\n\n  switch (mode) {\n    case 'lobby':\n      players_html = players.map(player => (\n        <tr key={player}>\n          <td><button onClick={() => kick(player)}>Kick</button></td>\n          <td>{player}</td>\n        </tr>\n      ))\n      let roles_html = Object.keys(roles).map(role => (\n        <tr key={role}>\n          <td><button onClick={() => toggle(role)}>{roles[role] ? \"disable\" : \"enable\"}</button></td>\n          <td>{role}</td>\n        </tr>\n      ))\n      custom_content = (\n        <div>\n          <h1>Players</h1>\n          <table><tbody>{players_html}</tbody></table>\n          <h1>Roles</h1>\n          <table><tbody>{roles_html}</tbody></table>\n          <button onClick={() => startGame()}>Start Game!</button>\n          <p>{message}</p>\n        </div>\n      )\n      break\n    case 'game':\n      const captain = myState.i === gameState.captain\n      const player_approve_box = (player, i) => (\n        <button onClick={() => toggleProposal(player)} className={gameState.proposal.includes(player) ? 'active' : 'inactive'}>{gameState.proposal && gameState.proposal.includes(player) ? \"Remove\" : \"Add\"}</button>\n      )\n      const player_info_box = (player, i) => (\n        <p>{gameState.proposal.includes(player) ? 'On team' : ''}</p>\n      )\n      const did_vote_box = (player, i) =>  (\n        <td>{i === myState.i ? render_vote(myState.vote) : gameState.votes.includes(player) ? \"VotedðŸ“¨\" : \"...\"}</td>\n      )\n      const vote_details_box = (player, i) => (\n        <td>{render_vote(gameState.votes[i])}</td>\n      )\n      players_html = players.map((player, i) => (\n        <tr key={player}>\n          <td>{captain && !gameState.proposed ? player_approve_box(player, i) : player_info_box(player, i)}</td>\n          <td>{i === hammer() ? 'Hammer' : i === gameState.captain ? 'Captain' : ''}</td>\n          <td>{player}</td>\n          <td>{myState.roles[i]}</td>\n          {gameState.votes.length === players.length ? vote_details_box(player, i) : did_vote_box(player, i)}\n        </tr>\n        ))\n      const captain_view = <p><button onClick={proposeTeam}>Propose the team</button></p>\n      const approve_view = (\n        <div>\n          <button onClick={() => vote('approve')} className={myState.vote ==='approve' ? 'active' : 'inactive'}>Approve</button>\n          <button onClick={() => vote('disapprove')} className={myState.vote ==='disapprove' ? 'active' : 'inactive'}>Reject</button>\n        </div>\n      )\n      const act_view = (\n        <div>\n          <button onClick={() => fetch('/server/game/act/' + name + '/' + key + '/success')} className='succeed'>Succeed</button>\n          <button onClick={() => fetch('/server/game/act/' + name + '/' + key + '/fail')} className='fail'>Fail</button>\n        </div>\n      )\n      const render_round = (round) => (\n        (gameState.successes.includes(round) ? \"W\" : gameState.fails.includes(round) ? \"L\" : \"_\") + \" \"\n      )\n      custom_content = (\n        <div>\n          <h3>{gameState['hypertext']}</h3>\n          <p>{[0, 1, 2, 3, 4].map(round => render_round(round))}</p>\n          <p>Rejected teams: {gameState.skips}</p> \n          <h1>Players</h1>\n          <table className=\"table\"><tbody>{players_html}</tbody></table>\n          {gameState.assassin_mode ? '' : gameState.approved ? (gameState.proposal.includes(name) && myState.act === '' ? act_view : \"It's time for a vote!\") : gameState.proposed ? approve_view : captain ? captain_view : \"\"}\n          <p>{message}</p>\n        </div>\n      )\n      break\n    default:\n      break\n  }\n\n  if (!auth) {\n    custom_content = <p>Authentication failed!</p>\n  }\n\n  return (\n    <Container className=\"justify-content-md-center\">\n        {mode_tag}\n        {custom_content}\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n      integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n      crossOrigin=\"anonymous\"\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}